install.packages("JuliaCall")
library(JuliaCall)
library(JuliaCall)
julia <- julia_setup()
julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin/julia")
pwd()
getwd()
julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup")
julia_setup(JULIA_HOME = "/Users/isaacgoldstein/")
julia_setup(JULIA_HOME = "/Users/isaacgoldstein")
julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_eval("sqrt(2)")
getwd()
julia_source("src/distribution_functions.jl")
?julia_setup
library(JuliaCall)
# specify where julia is installed
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.julia")
library(JuliaCall)
# specify where julia is installed
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_console()
library(JuliaCall)
# load specify where julia is installed
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command("Pkg.activate(.)")
julia_command("Pkg.activate(".")")
julia_command("2+2")
julia_command("`Pkg.activate(".")`")
julia_command("Pkg.activate(".")")
julia_command('Pkg.activate(".")')
julia_command('Pkg.instantiate')
julia_library("Optim")
julia_source("src/distribution_functions.jl")
julia_source("src/distribution_functions.jl")
julia_exists("NegativeBinomial2")
julia_source("src/closed_soln_eirr_withincid.jl")
julia_exists("power")
julia_call("power", 2, 3)
julia_source("src/bayes_eirrc_closed.jl")
julia_source("src/helper_functions.jl")
julia_source("src/helper_functions.jl")
julia_source('Pkg.add("StatsBase")')
julia_source('using Pkg; Pkg.add("StatsBase")')
julia_command('using Pkg; Pkg.add("StatsBase")')
julia_source("src/wastewater2.jl")
julia_eval('using Pkg; Pkg.add("StatsBase")')
julia_source("src/wastewater2.jl")
library(JuliaCall)
# load specify where julia is installed
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
julia_command('Pkg.instantiate')
julia_library("wastewater2.jl")
julia_library("wastewater2.jl")
julia_library("wastewater2.jl")
library(JuliaCall)
# load specify where julia is installed
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_library("wastewater2.jl")
julia_command('Pkg.activate(".")')
julia_command('Pkg.instantiate')
julia_library("wastewater2.jl")
julia_console()
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia$activate()
julia_command('Pkg.activate(".")')
julia_pkg("instantiate")
julia_command('Pkg.instantiate')
julia_library("Turing")
julia_command('using Pkg; Pkg.add("KernelDensity"); using KernelDensity')
julia_library("Turing")
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
julia_library("Turing")
julia_library("Turing")
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
julia_library("Turing")
julia_library("Turing")
julia_library("Turing"; precompile = false)
julia_library("Turing; precompile = false")
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
julia_command('Pkg.status()')
julia_library("Turing")
julia_command('using Turing')
julia_command('using Distributions')
julia_command('using Turing')
julia_command('Pkg.status()')
julia_command("VERSION")
julia_command("Pkg.update Turing")
julia_command("Pkg.update(Turing)")
julia_command("Pkg.update('Turing')")
julia_command('Pkg.update("Turing")')
julia_library("Turing")
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
julia_library("Turing")
julia_library("testpackage.jl")
julia_library("Distributions")
julia_library("Turing")
julia_library("AxisArrays")
julia_library("MCMCChains")
julia_library("Optim")
julia_library("LineSearches")
julia_library("Random")
julia_library("DrWatson")
julia_source("src/closed_soln_eirr_withincid.jl")
julia_source("src/distribution_functions.jl")
julia_source("src/helper_functions.jl")
julia_source("src/bayes_eirrc_closed.jl")
julia_source("fit_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
library(tidyverse)
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv"))
head(data)
names(data)
data$new_time
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
data
names(data)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
long_dat
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
n_samples
n_chains
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains)
julia_source("src/fit_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains)
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains, seed)
julia_source("src/fit_eirrc_closed.jl")
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains, seed)
julia_source("src/fit_eirrc_closed.jl")
library(JuliaCall)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
julia_source("src/closed_soln_eirr_withincid.jl")
julia_source("src/distribution_functions.jl")
julia_source("src/helper_functions.jl")
julia_source("src/bayes_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
library(tidyverse)
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains, seed)
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
# load the Turing package
# julia_source("src/closed_soln_eirr_withincid.jl")
# julia_source("src/distribution_functions.jl")
# julia_source("src/helper_functions.jl")
# julia_source("src/bayes_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains, seed)
class(testing)
julia_course("src/generate_pp_and_gq_eirrc.jl")
julia_source("src/generate_pp_and_gq_eirrc.jl")
julia_source("src/generate_pp_and_gq_eirrc.jl")
testing2 <- julia_call("generate_pp_and_gq_eirrc", testing, obs, time, seed)
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
# load the Turing package
# julia_source("src/closed_soln_eirr_withincid.jl")
# julia_source("src/distribution_functions.jl")
# julia_source("src/helper_functions.jl")
# julia_source("src/bayes_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
testing <- julia_call("fit_eirrc_closed", obs, time, priors_only, n_samples, n_chains, seed)
julia_source("src/generate_pp_and_gq_eirrc.jl")
testing2 <- julia_call("generate_pp_and_gq_eirrc", testing, obs, time, seed)
julia_source("src/generate_pp_and_gq_eirrc.jl")
testing2 <- julia_call("generate_pp_and_gq_eirrc", testing, obs, time, seed)
testing2[[1]]
testing2[[1]]
testing2[[2]]
testing2[[3]]
julia_source("src/generate_pp_and_gq_eirrc.jl")
testing2 <- julia_call("generate_pp_and_gq_eirrc", testing, obs, time, seed)
julia_source("src/generate_pp_and_gq_eirrc.jl")
testing2 <- julia_call("generate_pp_and_gq_eirrc", testing, obs, time, seed)
testing2[[1]]
testing2[[2]]
source("R/fit_eirrc.R")
fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
testing4 <- julia_call("generate_pp_and_gq_eirrc", testing3, obs, time, seed)
testing4[[1]]
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
# load the Turing package
# julia_source("src/closed_soln_eirr_withincid.jl")
# julia_source("src/distribution_functions.jl")
# julia_source("src/helper_functions.jl")
# julia_source("src/bayes_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
# load the Turing package
# julia_source("src/closed_soln_eirr_withincid.jl")
# julia_source("src/distribution_functions.jl")
# julia_source("src/helper_functions.jl")
# julia_source("src/bayes_eirrc_closed.jl")
julia_source("src/fit_eirrc_closed.jl")
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
# load the Turing package
# julia_source("src/closed_soln_eirr_withincid.jl")
# julia_source("src/distribution_functions.jl")
# julia_source("src/helper_functions.jl")
# julia_source("src/bayes_eirrc_closed.jl")
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
# load the Turing package
# julia_source("src/closed_soln_eirr_withincid.jl")
# julia_source("src/distribution_functions.jl")
# julia_source("src/helper_functions.jl")
# julia_source("src/bayes_eirrc_closed.jl")
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
source("R/generate_eirrc.R")
testing4 <- generate_eirrc(testing3, obs, time, seed)
class(testing4)
testing4[[1]]
class(testing4[[1]])
?str_extract
library(tidyverse)
?str_extract
?median_qi
library(tidybayes)
?median_qi
library(JuliaCall)
library(JuliaCall)
library(tidyverse)
# load specify where julia is installed
# set working directory to the folder containing Project.toml and manifest.toml
setwd("~/Documents/testpackage")
# activate the Julia environment in this folder
julia <- julia_setup(JULIA_HOME = "/Users/isaacgoldstein/.juliaup/bin")
julia_command('Pkg.activate(".")')
# instantiate the environment
julia_command('Pkg.instantiate')
julia_library("testpackage")
JuliaCall::julia_command("Logging.disable_logging(Logging.Warn)")
julia_library("Logging")
JuliaCall::julia_command("Logging.disable_logging(Logging.Warn)")
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
data <- read_csv(here::here("data", "scenario1_fitted_genecount_obsdata.csv")) %>%
filter(seed == 1)
long_dat <- data %>% dplyr::select(new_time, log_gene_copies1, log_gene_copies2, log_gene_copies3) %>% pivot_longer(-new_time)
obs <- long_dat$value
time <- long_dat$new_time
priors_only <- FALSE
n_samples <- 10L
n_chains <- 1L
seed <- 1L
source("R/fit_eirrc.R")
testing3 <- fit_eirrc(obs, time, priors_only, n_samples, n_chains, seed)
source("R/generate_eirrc.R")
testing4 <- generate_eirrc(testing3, obs, time, seed)
testing4[[1]]
testing4[[2]]
testing4[[3]]
